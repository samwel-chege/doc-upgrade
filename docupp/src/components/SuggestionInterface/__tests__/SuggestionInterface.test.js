import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import SuggestionInterface from '@/components/SuggestionInterface/SuggestionInterface';

global.fetch = jest.fn(); // Mock global fetch API

describe('SuggestionInterface Component', () => {
  const mockDocumentId = 123;
  
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders heading and description', () => {
    render(<SuggestionInterface documentId={mockDocumentId} />);
    expect(screen.getByText('Suggestions')).toBeInTheDocument();
    expect(
      screen.getByText('Review and apply suggestions generated by DocuApp AI for document improvements.')
    ).toBeInTheDocument();
  });

  test('renders "Load Suggestions" button when not loaded', () => {
    render(<SuggestionInterface documentId={mockDocumentId} />);
    expect(screen.getByText('Load Suggestions')).toBeInTheDocument();
  });

  test('fetches and displays suggestions when "Load Suggestions" is clicked', async () => {
    const mockSuggestions = {
      suggestions: [
        { id: 1, suggestion_text: 'Improve grammar in paragraph 1.' },
        { id: 2, suggestion_text: 'Add a conclusion section.' },
      ],
    };

    fetch.mockResolvedValueOnce({
      ok: true,
      json: async () => mockSuggestions,
    });

    render(<SuggestionInterface documentId={mockDocumentId} />);
    fireEvent.click(screen.getByText('Load Suggestions'));

    await waitFor(() => {
      expect(screen.getByText('Improve grammar in paragraph 1.')).toBeInTheDocument();
      expect(screen.getByText('Add a conclusion section.')).toBeInTheDocument();
    });
  });

  test('shows an error when fetching suggestions fails', async () => {
    fetch.mockResolvedValueOnce({
      ok: false,
    });

    render(<SuggestionInterface documentId={mockDocumentId} />);
    fireEvent.click(screen.getByText('Load Suggestions'));

    await waitFor(() => {
      expect(screen.queryByText('Improve grammar in paragraph 1.')).not.toBeInTheDocument();
    });
  });

  test('accepts a suggestion and reloads suggestions', async () => {
    const mockSuggestions = {
      suggestions: [{ id: 1, suggestion_text: 'Improve grammar in paragraph 1.' }],
    };

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockSuggestions,
      }) // For initial fetchSuggestions
      .mockResolvedValueOnce({
        ok: true,
      }) // For handleAccept
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockSuggestions,
      }); // For re-fetching suggestions

    render(<SuggestionInterface documentId={mockDocumentId} />);
    fireEvent.click(screen.getByText('Load Suggestions'));

    await waitFor(() => {
      expect(screen.getByText('Improve grammar in paragraph 1.')).toBeInTheDocument();
    });

    fireEvent.click(screen.getByText('Accept'));

    await waitFor(() => {
      expect(fetch).toHaveBeenCalledWith(
        `http://127.0.0.1:5555/suggestions/accept/1`,
        expect.objectContaining({
          method: 'POST',
        })
      );
    });
  });

  test('rejects a suggestion and reloads suggestions', async () => {
    const mockSuggestions = {
      suggestions: [{ id: 1, suggestion_text: 'Improve grammar in paragraph 1.' }],
    };

    fetch
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockSuggestions,
      }) // For initial fetchSuggestions
      .mockResolvedValueOnce({
        ok: true,
      }) // For handleReject
      .mockResolvedValueOnce({
        ok: true,
        json: async () => mockSuggestions,
      }); // For re-fetching suggestions

    render(<SuggestionInterface documentId={mockDocumentId} />);
    fireEvent.click(screen.getByText('Load Suggestions'));

    await waitFor(() => {
      expect(screen.getByText('Improve grammar in paragraph 1.')).toBeInTheDocument();
    });

    fireEvent.click(screen.getByText('Reject'));

    await waitFor(() => {
      expect(fetch).toHaveBeenCalledWith(
        `http://127.0.0.1:5555/suggestions/deny/1`,
        expect.objectContaining({
          method: 'DELETE',
        })
      );
    });
  });
});
